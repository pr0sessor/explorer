#!/usr/bin/env node
/* eslint-disable node/no-path-concat */
const app = require('../app')
const debug = require('debug')('ethereum-explorer:server')
const http = require('http')
const https = require('https')
const fs = require('fs')
const path = require('path')

const ssl = false

const port = normalizePort(process.env.PORT || 80)
app.set('port', port)

const server = http.createServer(app)

server.listen(port)
server.on('error', onError)
server.on('listening', onListening(port))

if (ssl) {
  const sport = normalizePort(process.env.PORT || 443)
  app.set('sport', sport)
  const server2 = https.createServer({
    cert: fs.readFileSync(path.join(__dirname, '../cert/cert.pem')),
    key: fs.readFileSync(path.join(__dirname, '../cert/key.pem'))
  }, app)

  server2.listen(sport)
  server2.on('error', onError)
  server2.on('listening', onListening(sport))
}

function normalizePort (val) {
  const port = parseInt(val, 10)

  if (isNaN(port)) {
    return val
  }

  if (port >= 0) {
    return port
  }

  return false
}

function onError (error) {
  if (error.syscall !== 'listen') {
    throw error
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port

  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges')
      process.exit(1)
      break
    case 'EADDRINUSE':
      console.error(bind + ' is already in use')
      process.exit(1)
      break
    default:
      throw error
  }
}

function onListening (port) {
  console.log('Listening on ' + port)
}
